#include <stdio.h>
#include <ctype.h>   // for isalnum()
#include <string.h>
#include <stdlib.h>

#define SIZE 100

// Stack implementation
char stack[SIZE];
int top = -1;

void push(char ch) {
    if (top >= SIZE - 1) {
        printf("Stack overflow\n");
        exit(1);
    }
    stack[++top] = ch;
}

char pop() {
    if (top == -1) {
        printf("Stack underflow\n");
        return '\0';
    }
    return stack[top--];
}

char peek() {
    if (top == -1)
        return '\0';
    return stack[top];
}

// Precedence function
int precedence(char ch) {
    switch (ch) {
        case '^': return 3;
        case '*':
        case '/': return 2;
        case '+':
        case '-': return 1;
        default:  return 0;
    }
}

// Checks if operator is right-associative (^)
int isRightAssociative(char ch) {
    return (ch == '^');
}

// Infix to Postfix conversion function
void infixToPostfix(char* infix, char* postfix) {
    int i, k = 0;
    char ch;

    for (i = 0; infix[i] != '\0'; i++) {
        ch = infix[i];

        if (isspace(ch))
            continue; // skip spaces

        if (isalnum(ch)) { // operand
            postfix[k++] = ch;
        }
        else if (ch == '(') {
            push(ch);
        }
        else if (ch == ')') {
            while (top != -1 && peek() != '(')
                postfix[k++] = pop();
            if (peek() == '(')
                pop(); // remove '('
        }
        else { // operator
            while (top != -1 &&
                   ((precedence(ch) < precedence(peek())) ||
                    (precedence(ch) == precedence(peek()) && !isRightAssociative(ch))) &&
                   peek() != '(') {
                postfix[k++] = pop();
            }
            push(ch);
        }
    }

    // Pop remaining operators
    while (top != -1)
        postfix[k++] = pop();

    postfix[k] = '\0';
}

int main() {
    char infix[SIZE], postfix[SIZE];

    printf("Enter infix expression: ");
    fgets(infix, SIZE, stdin);  // safer than scanf("%s", ...)
    infix[strcspn(infix, "\n")] = '\0'; // remove newline if present

    infixToPostfix(infix, postfix);
    printf("Postfix expression: %s\n", postfix);

    return 0;
}